<%
//TODO: fix for tenanted and revers proxied scenario.

include_once('/lib/units.jag');


function generateAggregatedInjectors() {
    var injectorPath, unitDef , unitDefPath, injectorFile;
    var injectors = new File('/generated/aggregatedInjectors.js');
    var unitDirs = new File('/units').listFiles();
    var units = [];
    var injectorPaths = [];
    injectors.open('w');

    for (var i = 0; i < unitDirs.length; i++) {
        var dir = unitDirs[i];
        if (dir.isDirectory()) {
            injectorPath = "/units/" + dir.getName() + '/' + dir.getName() + "Injector.js";
            injectorFile = new File(injectorPath);

            unitDefPath = "/units/" + dir.getName() + '/' + dir.getName() + ".json";
            if (new File(unitDefPath).isExists()) {
                unitDef = require(unitDefPath);
            } else {
                unitDef = {};
            }

            if (injectorFile.isExists()) {
                var sortableElm = {'file': injectorFile, 'weight': (unitDef.weight || 0 )};
                injectorPaths.push(sortableElm);
            }
        }
    }

    injectorPaths.sort(function (a, b) {
        return b.weight - a.weight;
    });
    for (i = 0; i < injectorPaths.length; i++) {
        //new Log().info(injectorPaths[i].file);
        injectorFile = injectorPaths[i].file;
        injectorFile.open('r');
        injectors.write(injectorFile.getStream());
        injectorFile.close();
    }

    injectors.close();
}

(function () {

    var elements, dir, i, j, unitDef, routes;
    var unitName;
    var pathDef;


    var getType = function (path) {
        var index = path.lastIndexOf('.');
        var ext = index < path.length ? path.substring(index + 1) : '';
        switch (ext) {
            case 'js':
                return 'application/javascript';
            case 'css':
                return 'text/css';
            case 'html':
                return 'text/html';
            case 'png':
                return 'image/png';
            case 'gif':
                return 'image/gif';
            case 'jpeg':
                return 'image/jpeg';
            case 'jpg':
                return 'image/jpg';
            default :
                return 'text/plain';
        }
    };

    var matchedPathDef = null;
    var matchedUnit = null;
    var uri = request.getRequestURI();
    var uriMatcher = new URIMatcher(uri);
    var unitDirs = new File('/units').listFiles();
    var widget, unitDefPath;

    var requestType = uri.split('/')[2];
    if (requestType == 'debug') {
    //TODO: This is a hack to skip static content for now.
    //      review and remove if necessary.
    } else if (requestType != 'js' && requestType != 'css') {
        for (i = 0; i < unitDirs.length; i++) {
            dir = unitDirs[i];
            if (dir.isDirectory()) {
                unitName = dir.getName();
                unitDefPath = '/units/' + unitName + '/' + unitName + '.json';
                if (new File(unitDefPath).isExists()) {
                    unitDef = require(unitDefPath);
                } else {
                    unitDef = {};
                }
                routes = unitDef['routes'] || [];
                for (j = 0; j < routes.length; j++) {
                    pathDef = routes[j];
                    elements = uriMatcher.match('/{appname}' + pathDef.path);
                    if (elements != null) {
                        if (matchedUnit != null) {
                            throw 'Conflicting paths for units ' + matchedUnit + ':' + matchedPathDef.path + ' and ' +
                                    unitName + ':' + pathDef.path;
                        }
                        matchedPathDef = pathDef;
                        matchedUnit = unitName;
                    }
                }
                widget = unitDef['widget'];
                if (widget) {
                    fillZone(widget['zone'], unitName);
                }

            }
        }
    }

    var prettyPrintReplace = function (match, pIndent, pKey, pVal, pEnd) {
        var key = '<span class=json-key>';
        var val = '<span class=json-value>';
        var str = '<span class=json-string>';
        var r = pIndent || '';
        if (pKey)
            r = r + key + pKey.replace(/[": ]/g, '') + '</span>: ';
        if (pVal)
            r = r + (pVal[0] == '"' ? str : val) + pVal + '</span>';
        return r + (pEnd || '');
    };

    var prettyPrint = function (obj) {
        var jsonLine = /^( *)("[\w]+": )?("[^"]*"|[\w.+-]*)?([,[{])?$/mg;
        return JSON.stringify(parse(stringify(obj)), null, 3)
                .replace(/&/g, '&amp;').replace(/\\"/g, '&quot;')
                .replace(/</g, '&lt;').replace(/>/g, '&gt;')
                .replace(jsonLine, prettyPrintReplace);
    };


    if (matchedUnit != null) {
        if (matchedPathDef.layout) {
            var debug = request.getParameter('debug');
            if (debug) {
                addCssLink('debug/css/debug-overlay.css');
                var originalDefineZone = defineZone;
                defineZone = function (zoneName) {
                    var unitName = unitsOfZone[zoneName];
                    if (unitName != null) {
                        model = getModel(unitName);
                        if (debug == 'overlay') {
                            unitName && include('/units/' + unitName + '/' + unitName + '.jag');
                            print('<pre  class="json-overlay"><code>' + prettyPrint(model) + '</code></pre>');
                        } else if (debug == 'json') {
                            print('<pre  class="json-overlay"><code>' + prettyPrint(model) + '</code></pre>');
                        }
                    }
                    if (debug == 'zones') {
                        print('<div  class="zone-overlay">' + zoneName + '</div>');
                    }
                    //response.sendError(500,'Unsupported debug mode "'+debug+'". should be one of [overlay, json, zones]');
                };
            }

            fillZone('main', matchedUnit);
            generateAggregatedInjectors();
            renderPage(matchedPathDef.layout);
        } else if (matchedPathDef.api) {
            model = {};
            var controllerPath = '/units/' + matchedUnit + '/' + matchedPathDef.api + '.js';
            if (new File(controllerPath).isExists()) {
                require(controllerPath);
            }
            var viewPath = '/units/' + matchedUnit + '/' + matchedPathDef.api + '.jag';
            if (new File(viewPath).isExists()) {
                include(viewPath);
            }

        }
    } else {
        var file = new File(uri.substring(uri.indexOf('/', 1)));
        if (file.isExists()) {
            response.addHeader('Content-type', getType(uri));
            file.open('r');
            print(file.getStream());
            file.close();
        } else {
            response.sendError(404, 'no unit defined for ' + uri);
        }
    }

})();
%>
