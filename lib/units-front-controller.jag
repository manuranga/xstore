<%
//TODO: fix for tenanted and revers proxied scenario.

include_once('/lib/units.jag');
(function () {

    var elements, dir, i, j, unitDef, routes;
    var unitName;
    var pathDef;


    var getType = function (path) {
        var index = path.lastIndexOf('.');
        var ext = index < path.length ? path.substring(index + 1) : '';
        switch (ext) {
            case 'js':
                return 'application/javascript';
            case 'css':
                return 'text/css';
            case 'html':
                return 'text/html';
            case 'png':
                return 'image/png';
            case 'gif':
                return 'image/gif';
            case 'jpeg':
                return 'image/jpeg';
            case 'jpg':
                return 'image/jpg';
            default :
                return 'text/plain';
        }
    };

    var matchedPathDef = null;
    var matchedUnit = null;
    var uri = request.getRequestURI();
    var uriMatcher = new URIMatcher(uri);
    var unitDirs = new File('../units').listFiles();
    for (i = 0; i < unitDirs.length; i++) {
        dir = unitDirs[i];
        if (dir.isDirectory()) {
            unitName = dir.getName();
            unitDef = require('../units/' + unitName + '/' + unitName + 'Unit.json');
            routes = unitDef['routes'] || [];
            for (j = 0; j < routes.length; j++) {
                pathDef = routes[j];
                elements = uriMatcher.match('/{appname}/' + pathDef.path);
                if (elements != null) {
                    if (matchedUnit != null) {
                        throw 'Conflicting paths for units ' + matchedUnit + ':' + matchedPathDef.path + ' and ' +
                                unitName + ':' + pathDef.path;
                    }
                    matchedPathDef = pathDef;
                    matchedUnit = unitName;
                }
            }
        }
    }


    if (matchedUnit != null) {
        if (matchedPathDef.layout) {
            fillZone('main', matchedUnit);
            fillZone('left', 'VerticalMenu');
            renderPage(matchedPathDef.layout);
        } else if (matchedPathDef.api) {
            include('../units/' + matchedUnit + '/' + matchedPathDef.api);
        }
    } else {
        var file = new File(uri.substring(uri.indexOf('/', 1)));
        if (file.isExists()) {
            response.addHeader('Content-type', getType(uri));
            file.open('r');
            print(file.getStream());
            file.close();
        } else {
            response.sendError(404, 'no unit defined for ' + uri);
        }
    }

})();
%>
