<%
var modelOfUnit = {};
var unitsOfZone = {};
var model = null; //due to a jaggery but the function scope variables are on inherited.

/**
 * render the given unit in-line in current jag.
 * the model is picked up form the values set using @see fillZone
 *
 * @param {string} unitName - name of the unit to be rendered.
 */
function renderUnit(unitName) {
    if (unitName != null) {
        model = getModel(unitName);
        require('/units/' + unitName + '/' + unitName + '.js');
        include('/units/' + unitName + '/' + unitName + '.jag');
    }
}

/**
 *
 */
function fillZone(zoneName, unitName) {
    unitsOfZone[zoneName] = unitName;
}

function initLayout() {
    var unitName, zoneName;
    for (zoneName in unitsOfZone) {
        unitName = unitsOfZone[zoneName];
        model = modelOfUnit[unitName] || {};
        //TODO: don't check for existence every time.;
        var controllerPath = '/units/' + unitName + '/' + unitName + '.js';
        if (new File(controllerPath).isExists()) {
            require(controllerPath);
        }
        modelOfUnit[unitName] = model;
    }
    require('../generated/aggregatedInjectors.js');
}

function defineZone(zoneName) {
    var unitName = unitsOfZone[zoneName];
    if (unitName != null) {
        model = getModel(unitName);
        include('/units/' + unitName + '/' + unitName + '.jag');
// print('<div style=" width: 100%; height: 100%; position: absolute; top: 0; left: 0;">' + stringify(model) + '</div>');
    }
}

function getModel(unitName) {
    var viewModel = modelOfUnit[unitName];
    if (!viewModel) {
        viewModel = {};
        modelOfUnit[unitName] = viewModel;
    }
    return viewModel;
}

function renderPage(layoutName) {
    include('/layouts/' + layoutName + '.jag');
}

function defineCSSZone() {
    var cssLinks = getModel('css').links || [];
    for (var i = 0; i < cssLinks.length; i++) {
        var css = cssLinks[i];
        print('<link rel="stylesheet" href="' + css + '">');
    }
}

function addCssLink(link) {
    mergeJson(getModel('css'), {links: [link]});
}

function sortByKey(array, key) {
    return array.sort(function (a, b) {
        var x = a[key];
        var y = b[key];
        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    });
}

/**
 * Merge the contents of the second array in the first.
 * arrays will preserve the order but first arrays order has precedence.
 */
function mergeArray(a, b, key, otherKeys) {
    var bValue, aValue, aKey, bKey;
    var newKey = otherKeys.shift();
    var newOtherKeys = otherKeys.length > 0 ? otherKeys : null;
    var inserted;
    var aOriginalLen = a.length;
    for (var i = 0; i < aOriginalLen; i++) {
        aValue = a[i];
        aKey = aValue[key];
        inserted = false;
        for (var j = 0; j < b.length; j++) {
            bValue = b[j];
            if (bValue != null && bValue[key] == aKey) {
                inserted = true;
                mergeJson(a[i], bValue, newKey, newOtherKeys);
                b[j] = null;
            }
        }
    }
    for (j = 0; j < b.length; j++) {
        bValue = b[j];
        if (bValue != null) {
            a.push(bValue);
        }
    }
}

/**
 * Merge the contents of the second object into the first object.
 * @see mergeArray for array merging semantics.
 * @param baseObj
 * @param mixinObj
 * @param {(string|Array.< string>)=} primaryKeys primary key for the array manging.
 */
function mergeJson(baseObj, mixinObj, primaryKeys) {

    var key;
    for (key in mixinObj) {
        if (mixinObj.hasOwnProperty(key)) {
            var baseValue = baseObj[key];
            var mixinValue = mixinObj[key];
            if (Array.isArray(mixinValue)) {
                if (Array.isArray(baseValue)) {
                    if (arguments.length > 2) {
                        var otherPrimaryKeys, primaryKey;
                        var arg3 = arguments[2];
                        if (Array.isArray(arg3)) {
                            otherPrimaryKeys = arg3.slice(1);
                            primaryKey = arg3[0];
                        } else {
                            otherPrimaryKeys = Array.slice(arguments, 3);
                            primaryKey = arg3;
                        }
                        if (primaryKey) {
                            mergeArray(baseValue, mixinValue, primaryKey, otherPrimaryKeys);
                        } else {
                            baseObj[key] = baseValue.concat(mixinValue);
                        }
                    } else {
                        baseObj[key] = baseValue.concat(mixinValue);
                    }
                } else if (baseValue == null) {
                    baseObj[key] = mixinValue;
                }
            } else {
                baseObj[key] = mixinValue;
            }
        }
    }
}
%>
